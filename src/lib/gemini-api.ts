// Function to generate a cache key for storing responses
export const generateCacheKey = (action: string, ruleName: string): string => {
  return `gemini_${action}_${ruleName.replace(/[^a-zA-Z0-9]/g, '_')}`;
};

// Mock function to simulate API call in development - will be replaced with actual API call
export const callGeminiAPI = async (
  action: 'explain' | 'examples',
  ruleName: string,
  arabicText: string,
  explanation: string
): Promise<string> => {
  // First check if there's a cached response
  const cacheKey = generateCacheKey(action, ruleName);
  const cachedResponse = localStorage.getItem(cacheKey);

  if (cachedResponse) {
    return cachedResponse;
  }

  // If no cached response, prepare a simulated API response for development
  let responseContent = '';

  // Simulate API latency
  await new Promise(resolve => setTimeout(resolve, 1000));

  if (action === 'explain') {
    responseContent = `
      <div dir="rtl" class="arabic-text">
        <h3>شرح إضافي لـ "${ruleName}"</h3>
        <p>هذا شرح إضافي يقدم معلومات أكثر تفصيلاً حول القاعدة النحوية. في الإصدار النهائي، سيتم استبدال هذا النص بمحتوى تم إنشاؤه بواسطة نموذج Gemini.</p>
        <p>${arabicText}</p>
      </div>
      <div dir="ltr" class="english-text mt-4">
        <h3>Additional Explanation for "${ruleName}"</h3>
        <p>This additional explanation provides more detailed information about the grammatical rule. In the final version, this text will be replaced with content generated by the Gemini model.</p>
        <p>${explanation}</p>
        <ul>
          <li>This is a detailed point about the rule</li>
          <li>Here's another important aspect to understand</li>
          <li>This rule is commonly used in the following contexts...</li>
        </ul>
      </div>
    `;
  } else if (action === 'examples') {
    responseContent = `
      <div dir="rtl" class="arabic-text">
        <h3>أمثلة لـ "${ruleName}"</h3>
        <p>فيما يلي بعض الأمثلة الإضافية لتوضيح استخدام هذه القاعدة النحوية. في الإصدار النهائي، سيتم استبدال هذا النص بمحتوى تم إنشاؤه بواسطة نموذج Gemini.</p>
        <ul>
          <li>مثال ١: [مثال بالعربية]</li>
          <li>مثال ٢: [مثال بالعربية]</li>
          <li>مثال ٣: [مثال بالعربية]</li>
        </ul>
      </div>
      <div dir="ltr" class="english-text mt-4">
        <h3>Examples for "${ruleName}"</h3>
        <p>Here are some additional examples to illustrate the use of this grammatical rule. In the final version, this text will be replaced with content generated by the Gemini model.</p>
        <ul>
          <li>Example 1: [Arabic example] - [English translation and explanation]</li>
          <li>Example 2: [Arabic example] - [English translation and explanation]</li>
          <li>Example 3: [Arabic example] - [English translation and explanation]</li>
        </ul>
      </div>
    `;
  }

  // Cache the response
  localStorage.setItem(cacheKey, responseContent);

  return responseContent;
};

// In a production environment, we would implement the actual API call
// This would be a function that calls our Next.js API route
// which would then make a secure call to the Gemini API
/*
export const callGeminiAPI = async (
  action: 'explain' | 'examples',
  ruleName: string,
  arabicText: string,
  explanation: string
): Promise<string> => {
  const cacheKey = generateCacheKey(action, ruleName);
  const cachedResponse = localStorage.getItem(cacheKey);

  if (cachedResponse) {
    return cachedResponse;
  }

  try {
    const response = await fetch('/api/gemini', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        action,
        ruleName,
        arabicText,
        explanation
      }),
    });

    if (!response.ok) {
      throw new Error('Failed to fetch from Gemini API');
    }

    const data = await response.json();
    const responseContent = data.content;

    // Cache the response
    localStorage.setItem(cacheKey, responseContent);

    return responseContent;
  } catch (error) {
    console.error('Error calling Gemini API:', error);
    return `<p>An error occurred while fetching the content. Please try again later.</p>`;
  }
};
*/
